apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      listen 80;
      server_name localhost;

      # Security headers
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      
      # Optimize for K3s standalone
      client_max_body_size 1m;
      client_body_buffer_size 128k;
      proxy_connect_timeout 90;
      proxy_send_timeout 90;
      proxy_read_timeout 90;

      location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        index index.html;
      }

      location /api/health {
        return 200 '{"status":"ok"}';
        add_header Content-Type application/json;
      }
      
      location /api/database {
        default_type application/json;
        proxy_pass http://database-check:3000/check;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
    }
  nginx.conf: |
    user nginx;
    worker_processes auto;
    pid /tmp/nginx/nginx.pid;
    error_log /var/log/nginx/error.log warn;
    
    events {
      worker_connections 1024;
    }
    
    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      
      access_log /var/log/nginx/access.log main;
      
      sendfile on;
      keepalive_timeout 65;
      
      # Custom temp paths for non-root user
      client_body_temp_path /tmp/nginx/client_temp;
      proxy_temp_path /tmp/nginx/proxy_temp;
      fastcgi_temp_path /tmp/nginx/fastcgi_temp;
      uwsgi_temp_path /tmp/nginx/uwsgi_temp;
      scgi_temp_path /tmp/nginx/scgi_temp;
      
      include /etc/nginx/conf.d/*.conf;
    }
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>K3s Cluster Test</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 40px;
          line-height: 1.6;
          color: #333;
        }
        h1 {
          color: #2c3e50;
        }
        button {
          background-color: #3498db;
          color: white;
          border: none;
          padding: 10px 15px;
          border-radius: 4px;
          cursor: pointer;
          font-size: 1em;
          margin: 20px 0;
        }
        button:hover {
          background-color: #2980b9;
        }
        #result {
          background-color: #f8f9fa;
          border: 1px solid #ddd;
          padding: 15px;
          border-radius: 4px;
          min-height: 50px;
        }
        .success {
          color: green;
        }
        .error {
          color: red;
        }
      </style>
    </head>
    <body>
      <h1>K3s Cluster Test</h1>
      <p>This page tests the connection to the PostgreSQL database in the Kubernetes cluster.</p>
      
      <button onclick="checkDatabase()">Check Database Connection</button>
      
      <div id="result">Connection status will appear here...</div>
      
      <script>
        async function checkDatabase() {
          const resultDiv = document.getElementById('result');
          resultDiv.innerHTML = "Checking database connection...";
          
          try {
            const response = await fetch('/api/database');
            const data = await response.json();
            
            if(data.connected) {
              resultDiv.innerHTML = `
                <p class="success">✅ Successfully connected to database!</p>
                <p>Database: ${data.database}</p>
                <p>User: ${data.user}</p>
                <p>PostgreSQL Version: ${data.version}</p>
              `;
            } else {
              resultDiv.innerHTML = `
                <p class="error">❌ Failed to connect to database.</p>
                <p>Error: ${data.error}</p>
              `;
            }
          } catch (error) {
            resultDiv.innerHTML = `
              <p class="error">❌ Error checking database connection</p>
              <p>${error.message}</p>
            `;
          }
        }
      </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database-check
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database-check
  template:
    metadata:
      labels:
        app: database-check
    spec:
      containers:
      - name: database-check
        image: node:18-alpine
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: PGHOST
          value: postgres
        - name: PGPORT
          value: "5432"
        # Increase resource limits slightly to ensure we have enough space
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /check
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /check
            port: http
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5
        command:
        - sh
        - -c
        - |
          # Install only PostgreSQL client
          apk add --no-cache postgresql-client

          # Create a direct script with minimal dependencies
          mkdir -p /app
          cd /app
          
          echo "Creating server.js..."
          cat > server.js << 'EOF'
          const http = require('http');
          const { execSync } = require('child_process');
          const { hostname } = require('os');
          
          // Create an HTTP server
          const server = http.createServer(async (req, res) => {
            if (req.url === '/check') {
              res.setHeader('Content-Type', 'application/json');
              
              try {
                console.log('Database check requested');
                // Use the PostgreSQL client directly instead of node-postgres
                const command = `PGPASSWORD="${process.env.PGPASSWORD}" psql -h ${process.env.PGHOST} -U ${process.env.PGUSER} -d ${process.env.PGDATABASE} -t -c "SELECT version()"`;
                const version = execSync(command).toString().trim();
                
                const response = {
                  connected: true,
                  database: process.env.PGDATABASE,
                  user: process.env.PGUSER,
                  version: version
                };
                
                console.log('Database check successful:', JSON.stringify(response));
                res.statusCode = 200;
                res.end(JSON.stringify(response));
              } catch (err) {
                console.error('Database check failed:', err.message);
                res.statusCode = 200;
                res.end(JSON.stringify({
                  connected: false,
                  error: err.message
                }));
              }
            } else if (req.url === '/health') {
              res.statusCode = 200;
              res.end('OK');
            } else {
              res.statusCode = 404;
              res.end('Not found');
            }
          });
          
          // Start the server
          server.listen(3000, '0.0.0.0', () => {
            console.log(`Database check service running at http://0.0.0.0:3000`);
          });
          EOF
          
          echo "Starting Node.js server..."
          cd /app
          NODE_ENV=production node server.js
        volumeMounts:
        - name: app-data
          mountPath: /app
      volumes:
      - name: app-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: database-check
spec:
  selector:
    app: database-check
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      # Init container to create and set permissions on required directories
      initContainers:
      - name: init-nginx-temp
        image: alpine:3.18
        command: ["/bin/sh", "-c"]
        args:
        - |
          mkdir -p /tmp/nginx/client_temp /tmp/nginx/proxy_temp /tmp/nginx/fastcgi_temp /tmp/nginx/uwsgi_temp /tmp/nginx/scgi_temp
          # Also create directory for PID file
          mkdir -p /tmp/nginx
          chmod 777 /tmp/nginx /tmp/nginx/client_temp /tmp/nginx/proxy_temp /tmp/nginx/fastcgi_temp /tmp/nginx/uwsgi_temp /tmp/nginx/scgi_temp
        volumeMounts:
        - name: nginx-temp
          mountPath: /tmp/nginx
      containers:
      - name: nginx
        image: nginx:stable-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nginx/conf.d/
        - name: html-volume
          mountPath: /usr/share/nginx/html/
        - name: nginx-temp
          mountPath: /tmp/nginx
        - name: nginx-config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 20
        # Add nginx configuration through environment variables
        env:
        - name: NGINX_ENTRYPOINT_QUIET_LOGS
          value: "1"
        securityContext:
          allowPrivilegeEscalation: false
          # Run as nginx user
          runAsUser: 101
          runAsGroup: 101
          capabilities:
            drop:
              - ALL
      volumes:
      - name: config-volume
        configMap:
          name: nginx-config
          items:
          - key: default.conf
            path: default.conf
      - name: html-volume
        configMap:
          name: nginx-config
          items:
          - key: index.html
            path: index.html
      - name: nginx-config-volume
        configMap:
          name: nginx-config
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: nginx-temp
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: NodePort  # Changed from LoadBalancer for standalone K3s